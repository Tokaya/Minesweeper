# 2016/7/24
import turtle

t = turtle.Turtle()
t.hideturtle()
turtle.tracer(10000, 0.00000001)
t.stamp()

def log(*args):
    print(*args)


# ====
# 测试
# 如果没有测试, 自行编写
# ====
#
# 定义用于测试的函数
# ensure 接受两个参数
# condition 是 bool, 如果为 False, 则输出 message
# 否则, 不做任何处理
def ensure(condition, message):
    # 在条件不成立的时候, 输出 message
    if not condition:
        log('*** 测试失败:', message)


def unique(a):
    '''
    a 是一个 list
    返回一个 list, 包含了 a 中所有元素, 且不包含重复元素
    例如 a 是 [1, 2, 3, 1, 3, 5]
    返回 [1, 2, 3, 5]

    :return: list
    '''
    list = []
    for i in a:
        if i not in list:
            list.append(i)
    return list


def intersection(a, b):
    '''
    a b 都是 list

    返回一个 list, 里面的元素是同时出现在 a b 中的元素
    这个 list 中不包含重复元素

    :return: list
    '''
    list = []
    for i in a:
        if i in b:
            list.append(i)
    return unique(list)


def union(a, b):
    '''
    a b 都是 list

    返回一个 list, 里面的元素是所有出现在 a b 中的元素
    这个 list 中不包含重复元素

    :return: list
    '''
    list = []
    for i in a:
        list.append(i)
    list += b
    log('2', list)
    return unique(list)


def difference(a, b):
    '''
    a b 都是 list

    返回一个 list, 里面的元素是
    所有在 a 中有 b 中没有的元素
    这个 list 中不包含重复元素

    :return: list
    '''
    list = []
    for i in a:
        if i not in b:
            list.append(i)
    return unique(list)


def difference_all(a, b):
    '''
    a b 都是 list

    返回一个 list, 里面的元素是
    所有在 a b 中的非公共元素
    这个 list 中不包含重复元素

    :return: list
    '''
    list = []
    for i in b:
        if i not in a:
            list.append(i)
    list += difference(a, b)
    return unique(list)


c = [1, 1, 2]
d = [1, 1, 2]


def issubset(a, b):
    '''
    a b 都是 list

    检查是否 a 中的每个元素都在 b 中出现
    返回 bool

    :return: bool
    '''
    return a in b


numbers = {
    '1': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '2': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '2', '2', '2', '2', '2', '2', '2', '2', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '0', '0', '0', '9'],
        ['9', '0', '0', '2', '2', '2', '0', '0', '0', '0', '2', '2', '2', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '2', '2', '2', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '2', '2', '2', '2', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '2', '2', '2', '2', '2', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '2', '2', '2', '2', '2', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '2', '2', '2', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '0', '0', '0', '9'],
        ['9', '0', '0', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '3': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '3', '3', '3', '3', '3', '3', '3', '3', '3', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '3', '3', '3', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '3', '3', '3', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '3', '3', '3', '3', '3', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '3', '3', '3', '3', '3', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '3', '3', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '3', '3', '0', '0', '0', '9'],
        ['9', '0', '0', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '0', '0', '0', '9'],
        ['9', '0', '0', '3', '3', '3', '3', '3', '3', '3', '3', '3', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '4': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '4', '4', '4', '0', '4', '4', '4', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '4', '4', '4', '0', '4', '4', '4', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '4', '4', '4', '0', '0', '4', '4', '4', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '4', '4', '4', '0', '0', '4', '4', '4', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '0', '0', '0', '9'],
        ['9', '0', '0', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '4', '4', '4', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '4', '4', '4', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '4', '4', '4', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '4', '4', '4', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '5': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '9'],
        ['9', '0', '0', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '9'],
        ['9', '0', '0', '5', '5', '5', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '5', '5', '5', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5', '5', '5', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '5', '5', '5', '0', '0', '0', '9'],
        ['9', '0', '0', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '9'],
        ['9', '0', '0', '5', '5', '5', '5', '5', '5', '5', '5', '5', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '6': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '6', '6', '6', '6', '6', '6', '6', '6', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '6', '6', '6', '6', '6', '6', '6', '6', '6', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '6', '6', '6', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '6', '6', '6', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '6', '6', '6', '6', '6', '6', '6', '6', '6', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '0', '0', '0', '9'],
        ['9', '0', '0', '6', '6', '6', '0', '0', '0', '0', '6', '6', '6', '0', '0', '0', '9'],
        ['9', '0', '0', '6', '6', '6', '0', '0', '0', '0', '6', '6', '6', '0', '0', '0', '9'],
        ['9', '0', '0', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '6', '6', '6', '6', '6', '6', '6', '6', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '7': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7', '7', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '7', '7', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '7', '7', '7', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '7', '7', '7', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '7', '7', '7', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '7', '7', '7', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '7', '7', '7', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '7', '7', '7', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '8': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '8', '8', '8', '8', '8', '8', '8', '8', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '0', '0', '0', '9'],
        ['9', '0', '0', '8', '8', '8', '0', '0', '0', '0', '8', '8', '8', '0', '0', '0', '9'],
        ['9', '0', '0', '8', '8', '8', '0', '0', '0', '0', '8', '8', '8', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '8', '8', '8', '8', '8', '8', '8', '8', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '8', '8', '8', '8', '8', '8', '8', '8', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '8', '8', '8', '0', '0', '0', '0', '8', '8', '8', '0', '0', '0', '9'],
        ['9', '0', '0', '8', '8', '8', '0', '0', '0', '0', '8', '8', '8', '0', '0', '0', '9'],
        ['9', '0', '0', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '8', '8', '8', '8', '8', '8', '8', '8', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '9': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '7', '0', '7', '7', '7', '7', '7', '0', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '7', '7', 'w', 'w', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '7', '7', 'w', 'w', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
        ['9', '0', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '0', '9'],
        ['9', '0', '0', '0', '7', '7', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '7', '7', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '7', '0', '7', '7', '7', '7', '7', '0', '7', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '0': [
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    'flag': [
        ['w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', '0', '9'],
        ['w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', '0', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '3', '3', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '3', '3', '3', '3', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '3', '3', '3', '3', '3', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '3', '3', '3', '3', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '3', '3', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '7', '7', '7', '7', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '7', '7', '7', '7', '7', '7', '7', '7', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '7', '7', '7', '7', '7', '7', '7', '7', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
    '10': [
        ['w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', '0', '9'],
        ['w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', '0', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', 'w', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9', '9', '9'],
        ['w', '0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['0', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
        ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
    ],
}


def setpen(x, y):
    t.penup()
    t.goto(x, y)
    t.pendown()


def draw_square(x, y, size, color):
    setpen(x, y)
    t.color(color)
    t.begin_fill()
    for i in range(4):
        t.forward(size)
        t.right(90)
    t.end_fill()


def draw_pixel(x, y, pixel, size=3):
    '''
    pixel 是一个 像素值
    像素值是只有一个字符的 str
    如果是 '0' 则画一个白色否则画黑色

    以坐标 x y 为矩形左上角顶点画一个边长为 size 的正方形

    :return: None
    '''
    colors = {
        '1': 'blue',
        '2': 'green',
        '3': 'red',
        '4': 'purple',
        '5': 'brown',
        '6': '#66CCCC',
        '7': 'black',
        '8': 'gray',
        '9': '#666666',
        '0': '#CCCCCC',
        'w': 'white',
    }
    color = colors.get(str(pixel))
    if color is not None:
        draw_square(x, y, size, color)


def draw_line(x, y, pixels, size):
    '''
    pixels 是一个包含了像素值的 list

    以坐标 x y 为左上角顶点画一排边长为 size 的正方形

    :return: None
    '''
    for i in range(len(pixels)):
        offset_x = x + size * i
        draw_pixel(offset_x, y, pixels[i], size)


def draw_block(x, y, block, size):
    '''
    block 是一个包含了 pixels list 的 list
    (也就是一个像素方阵)

    以坐标 x y 为左上角顶点画一个边长为 size 的正方形方阵

    :return: None
    '''
    for i in range(len(block)):
        offset_y = y - size * i
        draw_line(x, offset_y, block[i], size)


def draw_block_line(x, y, line, size):
    '''
    line 是一个包含了上面 block 元素的 list
    block 的宽度是 size * number_of_pixels (这个不懂就留言问)
    x y 是左上角顶点坐标

    :return: None
    '''
    number_of_pixels = len(line[0])
    for i in range(len(line)):
        offset_x = x + i * number_of_pixels * size
        draw_block(offset_x, y, line[i], size)



def draw_block_map(x, y, map, size):
    '''
    map 是一个包含了 line 元素的 list
    line 是一个包含了上面 block 元素的 list
    map 的宽高是 block_size * number_of_pixels (这个不懂就留言问)
    x y 是左上角顶点坐标

    :return: None
    '''
    number_of_pixels = len(map[0][0])
    for i in range(len(map)):
        offset_y = y - i * size * number_of_pixels
        draw_block_line(x, offset_y, map[i], size)


# 画扫雷地图
# 利用作业 7 中 marked_square 生成的 list


def draw_mine_map(x, y, map):
    '''
    x y 是地图左上角坐标

    map 是一个 marked_square 生成的 list(如上 square 所示)
    使用之前的函数画出这个地图
    注意: 0 - 8 的字符图案都存在一个 dict 中, 你要定义好
    字符图案最好是 10 * 10 或者 15 * 15, 总之工整一点且必须是正矩形

    :return: None
    '''

    new_map = []
    length = 17
    x = (x // length) * length
    y = (y // length) * length
    for i in map:
        line = []
        for o in i:
            number = numbers.get(str(o))
            line.append(number)
        new_map.append(line)
    draw_block_map(x, y, new_map, 1)


square = [
    [1, 2, 9, 2, 9],
    [1, 9, 2, 2, 2],
    [1, 2, 2, 2, 9],
    [1, 2, 9, 2, 1],
    [9, 2, 1, 1, 0],
]
block = [
    [10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10],
    [10, 10, 10, 10, 10],

]
# 直接使用 square 来调用画地图函数




def rect_touched(x, y, w, h, point):
    '''
    x y 是一个矩形的左上角坐标
    w h 是矩形的长宽
    point 是一个包含了一对坐标的 tuple
    例如(1, 2)

    检查 point 是否在矩形中, 并返回

    :return: bool
    '''
    inner_x, inner_y = point[0], point[1]
    if x <= inner_x <= x + w and y >= inner_y >= y - h:
        return True
    return False

# log(rect_touched(0, 0, 100, 100, (10, -100)))

#
# 检测点击的索引下标
# 利用课 7 上课代码中的 click 事件监听机制来判断
# 你点击的坐标在 map 中的索引下标(代码如下)
# http://vip.cocode.cc/chest/shared/165

def touched_index(point, x, y):
    '''
    x y 是鼠标点击的屏幕坐标

    根据作业 8.12, draw_mine_map 画了一个地图
    地图的左上角坐标已知
    地图的每个方格尺寸已知
    返回 (index_x, index_y)

    :return: 包含了索引下标的 tuple
    '''
    point_x, point_y = point
    length = 17
    index_x = abs(int(point_x - x) // length)
    index_y = abs(int(point_y - y) // length)
    return index_x, index_y

def draw_label(x, y, text):
    '''
    text 是一个字符串
    以 x y 为左上角坐标画出这个字符串
    字符串中如果存在没有字符图形的字符
    就用一个特殊的字符替代(所以你需要造一个特殊的字符)
    '''
    pass
def flag(*args):
    x, y = args
    length = 17
    x = (x // length) * length
    y = (y // length + 1) * length
    bomb = numbers.get('flag')
    draw_block(x, y, bomb, 1)

# 程序初始状态, 所有格子都是空白
# 用户点击格子后, 检查点击的是什么
# 如果是雷, 则显示所有雷, 并使用 9.1 显示结束语(随便你怎么来)
# 如果是数字或者空白, 则显示这个数字或者空白
# 如果是空白, 不要求像其他扫雷那样显示附近所有空白和数字
def click(x, y):
    length = 17
    x = (x // length) * length
    y = (y // length + 1) * length
    point = x, y
    w = length * len(square[0])
    h = length * len(square)
    map_x = -200
    map_y = 200
    # if rect_touched(map_x, map_y, w, h, point):
    block_x, block_y = touched_index(point, map_x, map_y)
    log(block_x, block_y)
    number = square[block_y][block_x]
    if number != 9:
        # log(number)
        draw_number = numbers.get(str(number))
        draw_block(x, y, draw_number, 1)
    else:
        log('ceui')
        draw_mine_map(map_x, map_y, square)


draw_mine_map(-200, 200, block)
turtle.onscreenclick(click)
turtle.onscreenclick(flag, 3)
turtle.update()
turtle.done()
# a = '0'
# b = ['1', '0', '1', '1']
# c = [
#     ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
#     ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '7', '0', '7', '7', '7', '7', '7', '0', '7', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '0', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '7', '7', 'w', 'w', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '7', '7', 'w', 'w', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
#     ['9', '0', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '0', '9'],
#     ['9', '0', '0', '0', '7', '7', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '7', '7', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '0', '7', '7', '7', '7', '7', '7', '7', '0', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '7', '0', '7', '7', '7', '7', '7', '0', '7', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '0', '0', '0', '0', '7', '0', '0', '0', '0', '0', '0', '0', '9'],
#     ['9', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '9'],
#     ['9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'],
# ]

# draw_pixel(10, 10, '9', 3)
# draw_line(50, 50, [9, 0, 9, 9, 0, 0, 9], 2)
# draw_block(100, -50, c, 2)
# line = [c, c, c]
# draw_block_line(-100, -100, line, 2)
# map = [line, line, line]
# draw_block_map(-100, 100, map, 2)

